/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { CreateOrUpdateArgs, createOrUpdateArgsBeet } from '../types/CreateOrUpdateArgs';

/**
 * @category Instructions
 * @category CreateOrUpdate
 * @category generated
 */
export type CreateOrUpdateInstructionArgs = {
  createOrUpdateArgs: CreateOrUpdateArgs;
};
/**
 * @category Instructions
 * @category CreateOrUpdate
 * @category generated
 */
export const CreateOrUpdateStruct = new beet.FixableBeetArgsStruct<
  CreateOrUpdateInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['createOrUpdateArgs', createOrUpdateArgsBeet],
  ],
  'CreateOrUpdateInstructionArgs',
);
/**
 * Accounts required by the _CreateOrUpdate_ instruction
 *
 * @property [_writable_, **signer**] payer Payer and creator of the RuleSet
 * @property [_writable_] ruleSetPda The PDA account where the RuleSet is stored
 * @property [] bufferPda (optional) The buffer to copy a complete ruleset from
 * @category Instructions
 * @category CreateOrUpdate
 * @category generated
 */
export type CreateOrUpdateInstructionAccounts = {
  payer: web3.PublicKey;
  ruleSetPda: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  bufferPda?: web3.PublicKey;
};

export const createOrUpdateInstructionDiscriminator = 0;

/**
 * Creates a _CreateOrUpdate_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateOrUpdate
 * @category generated
 */
export function createCreateOrUpdateInstruction(
  accounts: CreateOrUpdateInstructionAccounts,
  args: CreateOrUpdateInstructionArgs,
  programId = new web3.PublicKey('auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'),
) {
  const [data] = CreateOrUpdateStruct.serialize({
    instructionDiscriminator: createOrUpdateInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.ruleSetPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.bufferPda ?? programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
