/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** NumericalOverflow: Numerical Overflow */
export class NumericalOverflowError extends ProgramError {
  readonly name: string = 'NumericalOverflow';

  readonly code: number = 0x0; // 0

  constructor(program: Program, cause?: Error) {
    super('Numerical Overflow', program, cause);
  }
}
codeToErrorMap.set(0x0, NumericalOverflowError);
nameToErrorMap.set('NumericalOverflow', NumericalOverflowError);

/** DataTypeMismatch: Data type mismatch */
export class DataTypeMismatchError extends ProgramError {
  readonly name: string = 'DataTypeMismatch';

  readonly code: number = 0x1; // 1

  constructor(program: Program, cause?: Error) {
    super('Data type mismatch', program, cause);
  }
}
codeToErrorMap.set(0x1, DataTypeMismatchError);
nameToErrorMap.set('DataTypeMismatch', DataTypeMismatchError);

/** DataSliceUnexpectedIndexError: Data slice unexpected index error */
export class DataSliceUnexpectedIndexErrorError extends ProgramError {
  readonly name: string = 'DataSliceUnexpectedIndexError';

  readonly code: number = 0x2; // 2

  constructor(program: Program, cause?: Error) {
    super('Data slice unexpected index error', program, cause);
  }
}
codeToErrorMap.set(0x2, DataSliceUnexpectedIndexErrorError);
nameToErrorMap.set(
  'DataSliceUnexpectedIndexError',
  DataSliceUnexpectedIndexErrorError
);

/** IncorrectOwner: Incorrect account owner */
export class IncorrectOwnerError extends ProgramError {
  readonly name: string = 'IncorrectOwner';

  readonly code: number = 0x3; // 3

  constructor(program: Program, cause?: Error) {
    super('Incorrect account owner', program, cause);
  }
}
codeToErrorMap.set(0x3, IncorrectOwnerError);
nameToErrorMap.set('IncorrectOwner', IncorrectOwnerError);

/** PayloadVecIndexError: Could not index into PayloadVec */
export class PayloadVecIndexErrorError extends ProgramError {
  readonly name: string = 'PayloadVecIndexError';

  readonly code: number = 0x4; // 4

  constructor(program: Program, cause?: Error) {
    super('Could not index into PayloadVec', program, cause);
  }
}
codeToErrorMap.set(0x4, PayloadVecIndexErrorError);
nameToErrorMap.set('PayloadVecIndexError', PayloadVecIndexErrorError);

/** DerivedKeyInvalid: Derived key invalid */
export class DerivedKeyInvalidError extends ProgramError {
  readonly name: string = 'DerivedKeyInvalid';

  readonly code: number = 0x5; // 5

  constructor(program: Program, cause?: Error) {
    super('Derived key invalid', program, cause);
  }
}
codeToErrorMap.set(0x5, DerivedKeyInvalidError);
nameToErrorMap.set('DerivedKeyInvalid', DerivedKeyInvalidError);

/** PayerIsNotSigner: Payer is not a signer */
export class PayerIsNotSignerError extends ProgramError {
  readonly name: string = 'PayerIsNotSigner';

  readonly code: number = 0x6; // 6

  constructor(program: Program, cause?: Error) {
    super('Payer is not a signer', program, cause);
  }
}
codeToErrorMap.set(0x6, PayerIsNotSignerError);
nameToErrorMap.set('PayerIsNotSigner', PayerIsNotSignerError);

/** NotImplemented: Not implemented */
export class NotImplementedError extends ProgramError {
  readonly name: string = 'NotImplemented';

  readonly code: number = 0x7; // 7

  constructor(program: Program, cause?: Error) {
    super('Not implemented', program, cause);
  }
}
codeToErrorMap.set(0x7, NotImplementedError);
nameToErrorMap.set('NotImplemented', NotImplementedError);

/** BorshSerializationError: Borsh serialization error */
export class BorshSerializationErrorError extends ProgramError {
  readonly name: string = 'BorshSerializationError';

  readonly code: number = 0x8; // 8

  constructor(program: Program, cause?: Error) {
    super('Borsh serialization error', program, cause);
  }
}
codeToErrorMap.set(0x8, BorshSerializationErrorError);
nameToErrorMap.set('BorshSerializationError', BorshSerializationErrorError);

/** BorshDeserializationError: Borsh deserialization error */
export class BorshDeserializationErrorError extends ProgramError {
  readonly name: string = 'BorshDeserializationError';

  readonly code: number = 0x9; // 9

  constructor(program: Program, cause?: Error) {
    super('Borsh deserialization error', program, cause);
  }
}
codeToErrorMap.set(0x9, BorshDeserializationErrorError);
nameToErrorMap.set('BorshDeserializationError', BorshDeserializationErrorError);

/** ValueOccupied: Value in Payload or RuleSet is occupied */
export class ValueOccupiedError extends ProgramError {
  readonly name: string = 'ValueOccupied';

  readonly code: number = 0xa; // 10

  constructor(program: Program, cause?: Error) {
    super('Value in Payload or RuleSet is occupied', program, cause);
  }
}
codeToErrorMap.set(0xa, ValueOccupiedError);
nameToErrorMap.set('ValueOccupied', ValueOccupiedError);

/** DataIsEmpty: Account data is empty */
export class DataIsEmptyError extends ProgramError {
  readonly name: string = 'DataIsEmpty';

  readonly code: number = 0xb; // 11

  constructor(program: Program, cause?: Error) {
    super('Account data is empty', program, cause);
  }
}
codeToErrorMap.set(0xb, DataIsEmptyError);
nameToErrorMap.set('DataIsEmpty', DataIsEmptyError);

/** MessagePackSerializationError: MessagePack serialization error */
export class MessagePackSerializationErrorError extends ProgramError {
  readonly name: string = 'MessagePackSerializationError';

  readonly code: number = 0xc; // 12

  constructor(program: Program, cause?: Error) {
    super('MessagePack serialization error', program, cause);
  }
}
codeToErrorMap.set(0xc, MessagePackSerializationErrorError);
nameToErrorMap.set(
  'MessagePackSerializationError',
  MessagePackSerializationErrorError
);

/** MessagePackDeserializationError: MessagePack deserialization error */
export class MessagePackDeserializationErrorError extends ProgramError {
  readonly name: string = 'MessagePackDeserializationError';

  readonly code: number = 0xd; // 13

  constructor(program: Program, cause?: Error) {
    super('MessagePack deserialization error', program, cause);
  }
}
codeToErrorMap.set(0xd, MessagePackDeserializationErrorError);
nameToErrorMap.set(
  'MessagePackDeserializationError',
  MessagePackDeserializationErrorError
);

/** MissingAccount: Missing account */
export class MissingAccountError extends ProgramError {
  readonly name: string = 'MissingAccount';

  readonly code: number = 0xe; // 14

  constructor(program: Program, cause?: Error) {
    super('Missing account', program, cause);
  }
}
codeToErrorMap.set(0xe, MissingAccountError);
nameToErrorMap.set('MissingAccount', MissingAccountError);

/** MissingPayloadValue: Missing Payload value */
export class MissingPayloadValueError extends ProgramError {
  readonly name: string = 'MissingPayloadValue';

  readonly code: number = 0xf; // 15

  constructor(program: Program, cause?: Error) {
    super('Missing Payload value', program, cause);
  }
}
codeToErrorMap.set(0xf, MissingPayloadValueError);
nameToErrorMap.set('MissingPayloadValue', MissingPayloadValueError);

/** RuleSetOwnerMismatch: RuleSet owner must be payer */
export class RuleSetOwnerMismatchError extends ProgramError {
  readonly name: string = 'RuleSetOwnerMismatch';

  readonly code: number = 0x10; // 16

  constructor(program: Program, cause?: Error) {
    super('RuleSet owner must be payer', program, cause);
  }
}
codeToErrorMap.set(0x10, RuleSetOwnerMismatchError);
nameToErrorMap.set('RuleSetOwnerMismatch', RuleSetOwnerMismatchError);

/** NameTooLong: Name too long */
export class NameTooLongError extends ProgramError {
  readonly name: string = 'NameTooLong';

  readonly code: number = 0x11; // 17

  constructor(program: Program, cause?: Error) {
    super('Name too long', program, cause);
  }
}
codeToErrorMap.set(0x11, NameTooLongError);
nameToErrorMap.set('NameTooLong', NameTooLongError);

/** OperationNotFound: The operation retrieved is not in the selected RuleSet */
export class OperationNotFoundError extends ProgramError {
  readonly name: string = 'OperationNotFound';

  readonly code: number = 0x12; // 18

  constructor(program: Program, cause?: Error) {
    super(
      'The operation retrieved is not in the selected RuleSet',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x12, OperationNotFoundError);
nameToErrorMap.set('OperationNotFound', OperationNotFoundError);

/** RuleAuthorityIsNotSigner: Rule authority is not signer */
export class RuleAuthorityIsNotSignerError extends ProgramError {
  readonly name: string = 'RuleAuthorityIsNotSigner';

  readonly code: number = 0x13; // 19

  constructor(program: Program, cause?: Error) {
    super('Rule authority is not signer', program, cause);
  }
}
codeToErrorMap.set(0x13, RuleAuthorityIsNotSignerError);
nameToErrorMap.set('RuleAuthorityIsNotSigner', RuleAuthorityIsNotSignerError);

/** UnsupportedRuleSetRevMapVersion: Unsupported RuleSet revision map version */
export class UnsupportedRuleSetRevMapVersionError extends ProgramError {
  readonly name: string = 'UnsupportedRuleSetRevMapVersion';

  readonly code: number = 0x14; // 20

  constructor(program: Program, cause?: Error) {
    super('Unsupported RuleSet revision map version', program, cause);
  }
}
codeToErrorMap.set(0x14, UnsupportedRuleSetRevMapVersionError);
nameToErrorMap.set(
  'UnsupportedRuleSetRevMapVersion',
  UnsupportedRuleSetRevMapVersionError
);

/** UnsupportedRuleSetVersion: Unsupported RuleSet version */
export class UnsupportedRuleSetVersionError extends ProgramError {
  readonly name: string = 'UnsupportedRuleSetVersion';

  readonly code: number = 0x15; // 21

  constructor(program: Program, cause?: Error) {
    super('Unsupported RuleSet version', program, cause);
  }
}
codeToErrorMap.set(0x15, UnsupportedRuleSetVersionError);
nameToErrorMap.set('UnsupportedRuleSetVersion', UnsupportedRuleSetVersionError);

/** UnexpectedRuleSetFailure: Unexpected RuleSet failure */
export class UnexpectedRuleSetFailureError extends ProgramError {
  readonly name: string = 'UnexpectedRuleSetFailure';

  readonly code: number = 0x16; // 22

  constructor(program: Program, cause?: Error) {
    super('Unexpected RuleSet failure', program, cause);
  }
}
codeToErrorMap.set(0x16, UnexpectedRuleSetFailureError);
nameToErrorMap.set('UnexpectedRuleSetFailure', UnexpectedRuleSetFailureError);

/** RuleSetRevisionNotAvailable: RuleSet revision not available */
export class RuleSetRevisionNotAvailableError extends ProgramError {
  readonly name: string = 'RuleSetRevisionNotAvailable';

  readonly code: number = 0x17; // 23

  constructor(program: Program, cause?: Error) {
    super('RuleSet revision not available', program, cause);
  }
}
codeToErrorMap.set(0x17, RuleSetRevisionNotAvailableError);
nameToErrorMap.set(
  'RuleSetRevisionNotAvailable',
  RuleSetRevisionNotAvailableError
);

/** AdditionalSignerCheckFailed: Additional Signer check failed */
export class AdditionalSignerCheckFailedError extends ProgramError {
  readonly name: string = 'AdditionalSignerCheckFailed';

  readonly code: number = 0x18; // 24

  constructor(program: Program, cause?: Error) {
    super('Additional Signer check failed', program, cause);
  }
}
codeToErrorMap.set(0x18, AdditionalSignerCheckFailedError);
nameToErrorMap.set(
  'AdditionalSignerCheckFailed',
  AdditionalSignerCheckFailedError
);

/** PubkeyMatchCheckFailed: Pubkey Match check failed */
export class PubkeyMatchCheckFailedError extends ProgramError {
  readonly name: string = 'PubkeyMatchCheckFailed';

  readonly code: number = 0x19; // 25

  constructor(program: Program, cause?: Error) {
    super('Pubkey Match check failed', program, cause);
  }
}
codeToErrorMap.set(0x19, PubkeyMatchCheckFailedError);
nameToErrorMap.set('PubkeyMatchCheckFailed', PubkeyMatchCheckFailedError);

/** PubkeyListMatchCheckFailed: Pubkey List Match check failed */
export class PubkeyListMatchCheckFailedError extends ProgramError {
  readonly name: string = 'PubkeyListMatchCheckFailed';

  readonly code: number = 0x1a; // 26

  constructor(program: Program, cause?: Error) {
    super('Pubkey List Match check failed', program, cause);
  }
}
codeToErrorMap.set(0x1a, PubkeyListMatchCheckFailedError);
nameToErrorMap.set(
  'PubkeyListMatchCheckFailed',
  PubkeyListMatchCheckFailedError
);

/** PubkeyTreeMatchCheckFailed: Pubkey Tree Match check failed */
export class PubkeyTreeMatchCheckFailedError extends ProgramError {
  readonly name: string = 'PubkeyTreeMatchCheckFailed';

  readonly code: number = 0x1b; // 27

  constructor(program: Program, cause?: Error) {
    super('Pubkey Tree Match check failed', program, cause);
  }
}
codeToErrorMap.set(0x1b, PubkeyTreeMatchCheckFailedError);
nameToErrorMap.set(
  'PubkeyTreeMatchCheckFailed',
  PubkeyTreeMatchCheckFailedError
);

/** PDAMatchCheckFailed: PDA Match check failed */
export class PDAMatchCheckFailedError extends ProgramError {
  readonly name: string = 'PDAMatchCheckFailed';

  readonly code: number = 0x1c; // 28

  constructor(program: Program, cause?: Error) {
    super('PDA Match check failed', program, cause);
  }
}
codeToErrorMap.set(0x1c, PDAMatchCheckFailedError);
nameToErrorMap.set('PDAMatchCheckFailed', PDAMatchCheckFailedError);

/** ProgramOwnedCheckFailed: Program Owned check failed */
export class ProgramOwnedCheckFailedError extends ProgramError {
  readonly name: string = 'ProgramOwnedCheckFailed';

  readonly code: number = 0x1d; // 29

  constructor(program: Program, cause?: Error) {
    super('Program Owned check failed', program, cause);
  }
}
codeToErrorMap.set(0x1d, ProgramOwnedCheckFailedError);
nameToErrorMap.set('ProgramOwnedCheckFailed', ProgramOwnedCheckFailedError);

/** ProgramOwnedListCheckFailed: Program Owned List check failed */
export class ProgramOwnedListCheckFailedError extends ProgramError {
  readonly name: string = 'ProgramOwnedListCheckFailed';

  readonly code: number = 0x1e; // 30

  constructor(program: Program, cause?: Error) {
    super('Program Owned List check failed', program, cause);
  }
}
codeToErrorMap.set(0x1e, ProgramOwnedListCheckFailedError);
nameToErrorMap.set(
  'ProgramOwnedListCheckFailed',
  ProgramOwnedListCheckFailedError
);

/** ProgramOwnedTreeCheckFailed: Program Owned Tree check failed */
export class ProgramOwnedTreeCheckFailedError extends ProgramError {
  readonly name: string = 'ProgramOwnedTreeCheckFailed';

  readonly code: number = 0x1f; // 31

  constructor(program: Program, cause?: Error) {
    super('Program Owned Tree check failed', program, cause);
  }
}
codeToErrorMap.set(0x1f, ProgramOwnedTreeCheckFailedError);
nameToErrorMap.set(
  'ProgramOwnedTreeCheckFailed',
  ProgramOwnedTreeCheckFailedError
);

/** AmountCheckFailed: Amount checked failed */
export class AmountCheckFailedError extends ProgramError {
  readonly name: string = 'AmountCheckFailed';

  readonly code: number = 0x20; // 32

  constructor(program: Program, cause?: Error) {
    super('Amount checked failed', program, cause);
  }
}
codeToErrorMap.set(0x20, AmountCheckFailedError);
nameToErrorMap.set('AmountCheckFailed', AmountCheckFailedError);

/** FrequencyCheckFailed: Frequency check failed */
export class FrequencyCheckFailedError extends ProgramError {
  readonly name: string = 'FrequencyCheckFailed';

  readonly code: number = 0x21; // 33

  constructor(program: Program, cause?: Error) {
    super('Frequency check failed', program, cause);
  }
}
codeToErrorMap.set(0x21, FrequencyCheckFailedError);
nameToErrorMap.set('FrequencyCheckFailed', FrequencyCheckFailedError);

/** IsWalletCheckFailed: IsWallet check failed */
export class IsWalletCheckFailedError extends ProgramError {
  readonly name: string = 'IsWalletCheckFailed';

  readonly code: number = 0x22; // 34

  constructor(program: Program, cause?: Error) {
    super('IsWallet check failed', program, cause);
  }
}
codeToErrorMap.set(0x22, IsWalletCheckFailedError);
nameToErrorMap.set('IsWalletCheckFailed', IsWalletCheckFailedError);

/** ProgramOwnedSetCheckFailed: Program Owned Set check failed */
export class ProgramOwnedSetCheckFailedError extends ProgramError {
  readonly name: string = 'ProgramOwnedSetCheckFailed';

  readonly code: number = 0x23; // 35

  constructor(program: Program, cause?: Error) {
    super('Program Owned Set check failed', program, cause);
  }
}
codeToErrorMap.set(0x23, ProgramOwnedSetCheckFailedError);
nameToErrorMap.set(
  'ProgramOwnedSetCheckFailed',
  ProgramOwnedSetCheckFailedError
);

/** InvalidCompareOp: Invalid compare operator */
export class InvalidCompareOpError extends ProgramError {
  readonly name: string = 'InvalidCompareOp';

  readonly code: number = 0x24; // 36

  constructor(program: Program, cause?: Error) {
    super('Invalid compare operator', program, cause);
  }
}
codeToErrorMap.set(0x24, InvalidCompareOpError);
nameToErrorMap.set('InvalidCompareOp', InvalidCompareOpError);

/** InvalidConstraintType: Invalid constraint type value */
export class InvalidConstraintTypeError extends ProgramError {
  readonly name: string = 'InvalidConstraintType';

  readonly code: number = 0x25; // 37

  constructor(program: Program, cause?: Error) {
    super('Invalid constraint type value', program, cause);
  }
}
codeToErrorMap.set(0x25, InvalidConstraintTypeError);
nameToErrorMap.set('InvalidConstraintType', InvalidConstraintTypeError);

/** RuleSetReadFailed: Failed to read the rule set */
export class RuleSetReadFailedError extends ProgramError {
  readonly name: string = 'RuleSetReadFailed';

  readonly code: number = 0x26; // 38

  constructor(program: Program, cause?: Error) {
    super('Failed to read the rule set', program, cause);
  }
}
codeToErrorMap.set(0x26, RuleSetReadFailedError);
nameToErrorMap.set('RuleSetReadFailed', RuleSetReadFailedError);

/** DuplicatedOperationName: Duplicated operation name */
export class DuplicatedOperationNameError extends ProgramError {
  readonly name: string = 'DuplicatedOperationName';

  readonly code: number = 0x27; // 39

  constructor(program: Program, cause?: Error) {
    super('Duplicated operation name', program, cause);
  }
}
codeToErrorMap.set(0x27, DuplicatedOperationNameError);
nameToErrorMap.set('DuplicatedOperationName', DuplicatedOperationNameError);

/** AlignmentError: Could not determine alignemnt */
export class AlignmentErrorError extends ProgramError {
  readonly name: string = 'AlignmentError';

  readonly code: number = 0x28; // 40

  constructor(program: Program, cause?: Error) {
    super('Could not determine alignemnt', program, cause);
  }
}
codeToErrorMap.set(0x28, AlignmentErrorError);
nameToErrorMap.set('AlignmentError', AlignmentErrorError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getMplTokenAuthRulesErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getMplTokenAuthRulesErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
