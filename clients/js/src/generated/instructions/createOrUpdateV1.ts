/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  none,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  RuleSetRevisionInput,
  RuleSetRevisionInputArgs,
  getRuleSetRevisionInputSerializer,
} from '../../hooked';
import { addObjectProperty, isWritable } from '../shared';

// Accounts.
export type CreateOrUpdateV1InstructionAccounts = {
  /** Payer and creator of the RuleSet */
  payer?: Signer;
  /** The PDA account where the RuleSet is stored */
  ruleSetPda: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
  /** The buffer to copy a complete ruleset from */
  bufferPda?: PublicKey;
};

// Data.
export type CreateOrUpdateV1InstructionData = {
  discriminator: number;
  createOrUpdateV1Discriminator: number;
  ruleSetRevision: RuleSetRevisionInput;
};

export type CreateOrUpdateV1InstructionDataArgs = {
  ruleSetRevision?: RuleSetRevisionInputArgs;
};

export function getCreateOrUpdateV1InstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  CreateOrUpdateV1InstructionDataArgs,
  CreateOrUpdateV1InstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    CreateOrUpdateV1InstructionDataArgs,
    any,
    CreateOrUpdateV1InstructionData
  >(
    s.struct<CreateOrUpdateV1InstructionData>(
      [
        ['discriminator', s.u8()],
        ['createOrUpdateV1Discriminator', s.u8()],
        ['ruleSetRevision', getRuleSetRevisionInputSerializer(context)],
      ],
      { description: 'CreateOrUpdateV1InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: 0,
      createOrUpdateV1Discriminator: 0,
      ruleSetRevision: value.ruleSetRevision ?? none(),
    })
  ) as Serializer<
    CreateOrUpdateV1InstructionDataArgs,
    CreateOrUpdateV1InstructionData
  >;
}

// Args.
export type CreateOrUpdateV1InstructionArgs =
  CreateOrUpdateV1InstructionDataArgs;

// Instruction.
export function createOrUpdateV1(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: CreateOrUpdateV1InstructionAccounts & CreateOrUpdateV1InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplTokenAuthRules',
      'Br5EG6Mj6JEU7JVQEQ6WDjRBC6yoFSEQch65GqQjCA6'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(resolvingAccounts, 'payer', input.payer ?? context.payer);
  addObjectProperty(
    resolvingAccounts,
    'systemProgram',
    input.systemProgram ?? {
      ...context.programs.getPublicKey(
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'bufferPda',
    input.bufferPda ?? programId
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Payer.
  signers.push(resolvedAccounts.payer);
  keys.push({
    pubkey: resolvedAccounts.payer.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.payer, true),
  });

  // Rule Set Pda.
  keys.push({
    pubkey: resolvedAccounts.ruleSetPda,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.ruleSetPda, true),
  });

  // System Program.
  keys.push({
    pubkey: resolvedAccounts.systemProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.systemProgram, false),
  });

  // Buffer Pda.
  keys.push({
    pubkey: resolvedAccounts.bufferPda,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.bufferPda, false),
  });

  // Data.
  const data =
    getCreateOrUpdateV1InstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
