/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { PuffRuleSetArgs, puffRuleSetArgsBeet } from '../types/PuffRuleSetArgs';

/**
 * @category Instructions
 * @category PuffRuleSet
 * @category generated
 */
export type PuffRuleSetInstructionArgs = {
  puffRuleSetArgs: PuffRuleSetArgs;
};
/**
 * @category Instructions
 * @category PuffRuleSet
 * @category generated
 */
export const PuffRuleSetStruct = new beet.FixableBeetArgsStruct<
  PuffRuleSetInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['puffRuleSetArgs', puffRuleSetArgsBeet],
  ],
  'PuffRuleSetInstructionArgs',
);
/**
 * Accounts required by the _PuffRuleSet_ instruction
 *
 * @property [_writable_, **signer**] payer Payer and creator of the RuleSet
 * @property [_writable_] ruleSetPda The PDA account where the RuleSet is stored
 * @category Instructions
 * @category PuffRuleSet
 * @category generated
 */
export type PuffRuleSetInstructionAccounts = {
  payer: web3.PublicKey;
  ruleSetPda: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const puffRuleSetInstructionDiscriminator = 3;

/**
 * Creates a _PuffRuleSet_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PuffRuleSet
 * @category generated
 */
export function createPuffRuleSetInstruction(
  accounts: PuffRuleSetInstructionAccounts,
  args: PuffRuleSetInstructionArgs,
  programId = new web3.PublicKey('auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'),
) {
  const [data] = PuffRuleSetStruct.serialize({
    instructionDiscriminator: puffRuleSetInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.ruleSetPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
