/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from '@metaplex-foundation/umi';
import {
  RuleSetAccountData,
  getRuleSetAccountDataSerializer,
} from '../../hooked';
import { KeyArgs, getKeySerializer } from '../types';

export type RuleSet = Account<RuleSetAccountData>;

export function deserializeRuleSet(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): RuleSet {
  return deserializeAccount(
    rawAccount,
    getRuleSetAccountDataSerializer(context)
  );
}

export async function fetchRuleSet(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<RuleSet> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'RuleSet');
  return deserializeRuleSet(context, maybeAccount);
}

export async function safeFetchRuleSet(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<RuleSet | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists ? deserializeRuleSet(context, maybeAccount) : null;
}

export async function fetchAllRuleSet(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<RuleSet[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'RuleSet');
    return deserializeRuleSet(context, maybeAccount);
  });
}

export async function safeFetchAllRuleSet(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<RuleSet[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeRuleSet(context, maybeAccount as RpcAccount)
    );
}

export function getRuleSetGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplTokenAuthRules',
    'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      revisionMapLocation: number | bigint;
      revisions: Uint8Array;
    }>({
      key: [0, getKeySerializer(context)],
      revisionMapLocation: [1, s.u64()],
      revisions: [9, s.bytes()],
    })
    .deserializeUsing<RuleSet>((account) =>
      deserializeRuleSet(context, account)
    );
}

export function findRuleSetPda(
  context: Pick<Context, 'eddsa' | 'programs' | 'serializer'>,
  seeds: {
    /** The owner of the rule set. */
    owner: PublicKey;
    /** The name of the rule set. */
    name: string;
  }
): Pda {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplTokenAuthRules',
    'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
  );
  return context.eddsa.findPda(programId, [
    s.string({ size: 'variable' }).serialize('rule_set'),
    s.publicKey().serialize(seeds.owner),
    s.string({ size: 'variable' }).serialize(seeds.name),
  ]);
}

export async function fetchRuleSetFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc' | 'serializer'>,
  seeds: Parameters<typeof findRuleSetPda>[1],
  options?: RpcGetAccountOptions
): Promise<RuleSet> {
  return fetchRuleSet(context, findRuleSetPda(context, seeds), options);
}

export async function safeFetchRuleSetFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc' | 'serializer'>,
  seeds: Parameters<typeof findRuleSetPda>[1],
  options?: RpcGetAccountOptions
): Promise<RuleSet | null> {
  return safeFetchRuleSet(context, findRuleSetPda(context, seeds), options);
}
