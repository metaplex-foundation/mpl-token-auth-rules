/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from '@metaplex-foundation/umi';

export type RuleSetBuffer = Account<RuleSetBufferAccountData>;

export type RuleSetBufferAccountData = { serializedRuleSet: Uint8Array };

export type RuleSetBufferAccountDataArgs = RuleSetBufferAccountData;

export function getRuleSetBufferAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<RuleSetBufferAccountDataArgs, RuleSetBufferAccountData> {
  const s = context.serializer;
  return s.struct<RuleSetBufferAccountData>(
    [['serializedRuleSet', s.bytes()]],
    { description: 'RuleSetBufferAccountData' }
  ) as Serializer<RuleSetBufferAccountDataArgs, RuleSetBufferAccountData>;
}

export function deserializeRuleSetBuffer(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): RuleSetBuffer {
  return deserializeAccount(
    rawAccount,
    getRuleSetBufferAccountDataSerializer(context)
  );
}

export async function fetchRuleSetBuffer(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<RuleSetBuffer> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'RuleSetBuffer');
  return deserializeRuleSetBuffer(context, maybeAccount);
}

export async function safeFetchRuleSetBuffer(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<RuleSetBuffer | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeRuleSetBuffer(context, maybeAccount)
    : null;
}

export async function fetchAllRuleSetBuffer(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<RuleSetBuffer[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'RuleSetBuffer');
    return deserializeRuleSetBuffer(context, maybeAccount);
  });
}

export async function safeFetchAllRuleSetBuffer(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<RuleSetBuffer[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeRuleSetBuffer(context, maybeAccount as RpcAccount)
    );
}

export function getRuleSetBufferGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplTokenAuthRules',
    'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ serializedRuleSet: Uint8Array }>({
      serializedRuleSet: [0, s.bytes()],
    })
    .deserializeUsing<RuleSetBuffer>((account) =>
      deserializeRuleSetBuffer(context, account)
    );
}

export function findRuleSetBufferPda(
  context: Pick<Context, 'eddsa' | 'programs' | 'serializer'>,
  seeds: {
    /** The owner of the rule set. */
    owner: PublicKey;
  }
): Pda {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplTokenAuthRules',
    'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
  );
  return context.eddsa.findPda(programId, [
    s.string({ size: 'variable' }).serialize('rule_set'),
    s.publicKey().serialize(seeds.owner),
  ]);
}

export async function fetchRuleSetBufferFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc' | 'serializer'>,
  seeds: Parameters<typeof findRuleSetBufferPda>[1],
  options?: RpcGetAccountOptions
): Promise<RuleSetBuffer> {
  return fetchRuleSetBuffer(
    context,
    findRuleSetBufferPda(context, seeds),
    options
  );
}

export async function safeFetchRuleSetBufferFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc' | 'serializer'>,
  seeds: Parameters<typeof findRuleSetBufferPda>[1],
  options?: RpcGetAccountOptions
): Promise<RuleSetBuffer | null> {
  return safeFetchRuleSetBuffer(
    context,
    findRuleSetBufferPda(context, seeds),
    options
  );
}
