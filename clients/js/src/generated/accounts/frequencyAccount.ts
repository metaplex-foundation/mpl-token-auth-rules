/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from '@metaplex-foundation/umi';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type FrequencyAccount = Account<FrequencyAccountAccountData>;

export type FrequencyAccountAccountData = {
  key: Key;
  lastUpdate: bigint;
  period: bigint;
};

export type FrequencyAccountAccountDataArgs = {
  key: KeyArgs;
  lastUpdate: number | bigint;
  period: number | bigint;
};

export function getFrequencyAccountAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<FrequencyAccountAccountDataArgs, FrequencyAccountAccountData> {
  const s = context.serializer;
  return s.struct<FrequencyAccountAccountData>(
    [
      ['key', getKeySerializer(context)],
      ['lastUpdate', s.i64()],
      ['period', s.i64()],
    ],
    { description: 'FrequencyAccountAccountData' }
  ) as Serializer<FrequencyAccountAccountDataArgs, FrequencyAccountAccountData>;
}

export function deserializeFrequencyAccount(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): FrequencyAccount {
  return deserializeAccount(
    rawAccount,
    getFrequencyAccountAccountDataSerializer(context)
  );
}

export async function fetchFrequencyAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<FrequencyAccount> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'FrequencyAccount');
  return deserializeFrequencyAccount(context, maybeAccount);
}

export async function safeFetchFrequencyAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<FrequencyAccount | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeFrequencyAccount(context, maybeAccount)
    : null;
}

export async function fetchAllFrequencyAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<FrequencyAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'FrequencyAccount');
    return deserializeFrequencyAccount(context, maybeAccount);
  });
}

export async function safeFetchAllFrequencyAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<FrequencyAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeFrequencyAccount(context, maybeAccount as RpcAccount)
    );
}

export function getFrequencyAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplTokenAuthRules',
    'Br5EG6Mj6JEU7JVQEQ6WDjRBC6yoFSEQch65GqQjCA6'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      lastUpdate: number | bigint;
      period: number | bigint;
    }>({
      key: [0, getKeySerializer(context)],
      lastUpdate: [1, s.i64()],
      period: [9, s.i64()],
    })
    .deserializeUsing<FrequencyAccount>((account) =>
      deserializeFrequencyAccount(context, account)
    );
}

export function getFrequencyAccountSize(): number {
  return 17;
}
