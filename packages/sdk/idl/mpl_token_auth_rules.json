{
  "version": "0.2.2",
  "name": "mpl_token_auth_rules",
  "instructions": [
    {
      "name": "CreateOrUpdate",
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "desc": "Payer and creator of the RuleSet"
        },
        {
          "name": "ruleSetPda",
          "isMut": true,
          "isSigner": false,
          "desc": "The PDA account where the RuleSet is stored"
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "desc": "System program"
        },
        {
          "name": "bufferPda",
          "isMut": false,
          "isSigner": false,
          "desc": "The buffer to copy a complete ruleset from",
          "optional": true
        }
      ],
      "args": [
        {
          "name": "createOrUpdateArgs",
          "type": {
            "defined": "CreateOrUpdateArgs"
          }
        }
      ],
      "discriminant": {
        "type": "u8",
        "value": 0
      }
    },
    {
      "name": "Validate",
      "accounts": [
        {
          "name": "ruleSetPda",
          "isMut": false,
          "isSigner": false,
          "desc": "The PDA account where the RuleSet is stored"
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false,
          "desc": "Mint of token asset"
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "desc": "System program"
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "desc": "Payer for RuleSet state PDA account",
          "optional": true
        },
        {
          "name": "ruleAuthority",
          "isMut": false,
          "isSigner": true,
          "desc": "Signing authority for any Rule state updates",
          "optional": true
        },
        {
          "name": "ruleSetStatePda",
          "isMut": true,
          "isSigner": false,
          "desc": "The PDA account where any RuleSet state is stored",
          "optional": true
        }
      ],
      "args": [
        {
          "name": "validateArgs",
          "type": {
            "defined": "ValidateArgs"
          }
        }
      ],
      "discriminant": {
        "type": "u8",
        "value": 1
      }
    },
    {
      "name": "WriteToBuffer",
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "desc": "Payer and creator of the RuleSet"
        },
        {
          "name": "bufferPda",
          "isMut": true,
          "isSigner": false,
          "desc": "The PDA account where the RuleSet buffer is stored"
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "desc": "System program"
        }
      ],
      "args": [
        {
          "name": "writeToBufferArgs",
          "type": {
            "defined": "WriteToBufferArgs"
          }
        }
      ],
      "discriminant": {
        "type": "u8",
        "value": 2
      }
    }
  ],
  "accounts": [
    {
      "name": "FrequencyAccount",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "key",
            "type": {
              "defined": "Key"
            }
          },
          {
            "name": "lastUpdate",
            "type": "i64"
          },
          {
            "name": "period",
            "type": "i64"
          }
        ]
      }
    }
  ],
  "types": [
    {
      "name": "SeedsVec",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "seeds",
            "type": {
              "vec": "bytes"
            }
          }
        ]
      }
    },
    {
      "name": "ProofInfo",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proof",
            "type": {
              "vec": {
                "array": [
                  "u8",
                  32
                ]
              }
            }
          }
        ]
      }
    },
    {
      "name": "Payload",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "map",
            "type": {
              "hashMap": [
                "string",
                {
                  "defined": "PayloadType"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "CreateOrUpdateArgs",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "V1",
            "fields": [
              {
                "name": "serialized_rule_set",
                "type": "bytes"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "ValidateArgs",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "V1",
            "fields": [
              {
                "name": "operation",
                "type": "string"
              },
              {
                "name": "payload",
                "type": {
                  "defined": "Payload"
                }
              },
              {
                "name": "update_rule_state",
                "type": "bool"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "WriteToBufferArgs",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "V1",
            "fields": [
              {
                "name": "serialized_rule_set",
                "type": "bytes"
              },
              {
                "name": "overwrite",
                "type": "bool"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "PayloadType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Pubkey",
            "fields": [
              "publicKey"
            ]
          },
          {
            "name": "Seeds",
            "fields": [
              {
                "defined": "SeedsVec"
              }
            ]
          },
          {
            "name": "MerkleProof",
            "fields": [
              {
                "defined": "ProofInfo"
              }
            ]
          },
          {
            "name": "Number",
            "fields": [
              "u64"
            ]
          }
        ]
      }
    },
    {
      "name": "Key",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Uninitialized"
          },
          {
            "name": "Frequency"
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "code": 0,
      "name": "NumericalOverflow",
      "msg": "Numerical Overflow"
    },
    {
      "code": 1,
      "name": "DataTypeMismatch",
      "msg": "Data type mismatch"
    },
    {
      "code": 2,
      "name": "IncorrectOwner",
      "msg": "Incorrect account owner"
    },
    {
      "code": 3,
      "name": "PayloadVecIndexError",
      "msg": "Could not index into PayloadVec"
    },
    {
      "code": 4,
      "name": "DerivedKeyInvalid",
      "msg": "Derived key invalid"
    },
    {
      "code": 5,
      "name": "PayerIsNotSigner",
      "msg": "Payer is not a signer"
    },
    {
      "code": 6,
      "name": "NotImplemented",
      "msg": "Not implemented"
    },
    {
      "code": 7,
      "name": "BorshSerializationError",
      "msg": "Borsh serialization error"
    },
    {
      "code": 8,
      "name": "ValueOccupied",
      "msg": "Value in Payload or RuleSet is occupied"
    },
    {
      "code": 9,
      "name": "DataIsEmpty",
      "msg": "Account data is empty"
    },
    {
      "code": 10,
      "name": "MessagePackDeserializationError",
      "msg": "MessagePack deserialization error"
    },
    {
      "code": 11,
      "name": "MissingAccount",
      "msg": "Missing account"
    },
    {
      "code": 12,
      "name": "MissingPayloadValue",
      "msg": "Missing Payload value"
    },
    {
      "code": 13,
      "name": "RuleSetOwnerMismatch",
      "msg": "RuleSet owner must be payer"
    },
    {
      "code": 14,
      "name": "NameTooLong",
      "msg": "Name too long"
    },
    {
      "code": 15,
      "name": "OperationNotFound",
      "msg": "The operation retrieved is not in the selected RuleSet"
    },
    {
      "code": 16,
      "name": "RuleAuthorityIsNotSigner",
      "msg": "Rule authority is not signer"
    },
    {
      "code": 17,
      "name": "UnsupportedRuleSetVersion",
      "msg": "Unsupported RuleSet version"
    },
    {
      "code": 18,
      "name": "UnexpectedRuleSetFailure",
      "msg": "Unexpected RuleSet failure"
    },
    {
      "code": 19,
      "name": "AdditionalSignerCheckFailed",
      "msg": "Additional Signer check failed"
    },
    {
      "code": 20,
      "name": "PubkeyMatchCheckFailed",
      "msg": "Pubkey Match check failed"
    },
    {
      "code": 21,
      "name": "PubkeyListMatchCheckFailed",
      "msg": "Pubkey List Match check failed"
    },
    {
      "code": 22,
      "name": "PubkeyTreeMatchCheckFailed",
      "msg": "Pubkey Tree Match check failed"
    },
    {
      "code": 23,
      "name": "PDAMatchCheckFailed",
      "msg": "PDA Match check failed"
    },
    {
      "code": 24,
      "name": "ProgramOwnedCheckFailed",
      "msg": "Program Owned check failed"
    },
    {
      "code": 25,
      "name": "ProgramOwnedListCheckFailed",
      "msg": "Program Owned List check failed"
    },
    {
      "code": 26,
      "name": "ProgramOwnedTreeCheckFailed",
      "msg": "Program Owned Tree check failed"
    },
    {
      "code": 27,
      "name": "AmountCheckFailed",
      "msg": "Amount checked failed"
    },
    {
      "code": 28,
      "name": "FrequencyCheckFailed",
      "msg": "Frequency check failed"
    },
    {
      "code": 29,
      "name": "IsWalletCheckFailed",
      "msg": "Is Wallet check failed"
    }
  ],
  "metadata": {
    "origin": "shank",
    "address": "auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg",
    "binaryVersion": "0.0.11",
    "libVersion": "0.0.11"
  }
}